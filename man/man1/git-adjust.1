.TH GIT-ADJUST 1 "24 November, 2022" "Gitz 1.3.0" "Gitz Manual"

.SH NAME
git-adjust - Amend any commit, not just the last

.SH SYNOPSIS
.sp
.nf
.ft C
git adjust [-h] [-q] [-v] [-A] [-a] [-c COMMIT] [-m MESSAGE] [-n] [target]
.ft P
.fi


.SH DESCRIPTION
Amend any commit in the current branch \- either with another commit,
or with the contents of the staging area.

.SH OPTIONS
\fB\-h, \-\-help\fP: show this help message and exit

\fB\-q, \-\-quiet\fP: Suppress all output

\fB\-v, \-\-verbose\fP: Report all messages in great detail

\fB\-A, \-\-all\-files\fP: Use all files, even untracked ones

\fB\-a, \-\-all\-tracked\fP: Use all staged and tracked files

\fB\-c COMMIT, \-\-commit COMMIT\fP: Commit that is used to amend the target. If empty, use the changes in the staging area.

\fB\-m MESSAGE, \-\-message MESSAGE\fP: If set, use this for the message of the amended commit

\fB\-n, \-\-no\-run\fP: If set, commands will be printed but not executed


\fBtarget\fP: Target commit that gets amended


.SH DANGER
Rewrites history!

.SH EXAMPLES
.TP
.B \fB git adjust \fP
Amends HEAD with the contents of the staging area.

.sp
Equivalent to \fBgit commit \-\-amend \-\-no\-edit\fP

.sp
.TP
.B \fB git adjust HEAD~ \fP
Amends HEAD~ with the contents of the staging area and
then cherry\-picks HEAD back on top of it

.sp
.TP
.B \fB git adjust HEAD~3 \fP
Amends HEAD~3 with the contents of the staging area, then
cherry\-picks HEAD~2, HEAD~ and HEAD back again on top of it

.sp
.TP
.B \fB git adjust \-m "Some message" HEAD~3 \fP
Amends HEAD~3 with the contents of the staging area and the commit
message "Some message", then cherry\-picks HEAD~2, HEAD~ and HEAD on top

.sp
.TP
.B \fB git adjust HEAD~3 \-\-commit=HEAD~ \fP
Amends HEAD~3 with HEAD~ and then cherry\-picks HEAD~2 and HEAD
on top of it

