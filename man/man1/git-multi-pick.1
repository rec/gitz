.TH GIT-MULTI-PICK 1 "24 November, 2022" "Gitz 1.3.0" "Gitz Manual"

.SH NAME
git-multi-pick - Cherry-pick multiple commits, with an optional squash

.SH SYNOPSIS
.sp
.nf
.ft C
git multi-pick [-h] [-q] [-v] [-s [SQUASH]] [-n] commit_ids [commit_ids ...]
.ft P
.fi


.SH DESCRIPTION
Cherry pick each commit one after another.

.sp
If there is a \-s/\-\-squash argument, squash the commits down into one,
using the argument to \-s/\-\-squash as the commit message.

.SH OPTIONS
\fB\-h, \-\-help\fP: show this help message and exit

\fB\-q, \-\-quiet\fP: Suppress all output

\fB\-v, \-\-verbose\fP: Report all messages in great detail

\fB\-s [SQUASH], \-\-squash [SQUASH]\fP: Squash all commits into one. If an argument is provided, use it as the commit message.

\fB\-n, \-\-no\-run\fP: If set, commands will be printed but not executed


\fBcommit_ids\fP: List of commit IDs to cherry pick


.SH EXAMPLES
.TP
.B \fB git multi\-pick d2dfe0c a2833bc \fP
Cherry\-picks the commit d2dfe0c and then a2833bc on top of it.

.sp
.TP
.B \fB git multi\-pick d2dfe0c a2833bc \-\-squash='Squashed commit!' \fP
Cherry\-picks the commit d2dfe0c and then a2833bc on top of it,
and then squashes them into one commit with the commit message
'Squashed commit!'

