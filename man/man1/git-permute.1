.TH GIT-PERMUTE 1 "24 November, 2022" "Gitz 1.3.0" "Gitz Manual"

.SH NAME
git-permute - Reorder and delete commits in the current branch

.SH SYNOPSIS
.sp
.nf
.ft C
git permute [-h] [-q] [-v] [-s [SQUASH]] [-n] permutation
.ft P
.fi


.SH DESCRIPTION
Permutes the commits in the current branch, perhaps deleting some.

.sp
For example, \fBgit permute ba\fP switches the first and second most
recent commits, \fBgit permute cba\fP swaps the first and third
commits, \fBgit permute cab\fP pops the third commit to be the most
recent, top commit on the branch.

.SH OPTIONS
\fB\-h, \-\-help\fP: show this help message and exit

\fB\-q, \-\-quiet\fP: Suppress all output

\fB\-v, \-\-verbose\fP: Report all messages in great detail

\fB\-s [SQUASH], \-\-squash [SQUASH]\fP: Squash all commits into one. If an argument is provided, use it as the commit message.

\fB\-n, \-\-no\-run\fP: If set, commands will be printed but not executed


\fBpermutation\fP: 

\fBPattern\fP: string to permute


.SH DANGER
Rewrites history!

.SH EXAMPLES
.TP
.B \fB git permute 10 \fP
.TP
.B \fB git permute ba \fP
Switches the first and second most recent commits

.sp
.TP
.B \fB git permute ab \fP
.TP
.B \fB git permute abc \fP
.TP
.B \fB git permute 01 \fP
.TP
.B \fB git permute 012 \fP
Do nothing

.sp
.TP
.B \fB git permute cab \fP
.TP
.B \fB git permute 201 \fP
Cycles the three most recent commits so the third one is first

.sp
.TP
.B \fB git permute edcg \fP
.TP
.B \fB git permute 5437 \fP
Deletes the most recent two commeits, reverses the next three, and
deletes the sixth.

.sp
.TP
.B \fB git permute edcg \-s 'My message' \fP
.TP
.B \fB git permute edcg \-\-squash='My message' \fP
.TP
.B \fB git permute 5437 \-s "My message" \fP
Same as the previous command, but squashes the three commits into
one with the commit message 'My message'

